@using TorrentSite.Areas.ViewModels;




<div id="forecast">
    @(Html.Kendo().TabStrip()
          .Name("tabstrip")
          .Items(tabstrip =>
          {
              tabstrip.Add().Text("Users")
                  .Selected(true)
                  .Content(@<text>

                    @*USERS*@
                    <h2>AllUsers</h2>

                    @(Html.Kendo()
        .Grid<UserViewModel>()
    .Name("grid-user")
    .Columns(columns =>
    {
        columns.Bound(model => model.Username);
        columns.Bound(model => model.RolesAsString);
        columns.Command(command =>
            {
                command.Edit().Text("Promote");
                command.Destroy();
            });
    })
    .Pageable(page =>
        {
            page.PreviousNext(true);
            page.Numeric(true);
        })
    .Sortable(sort =>
        {
            sort.AllowUnsort(false);
            sort.SortMode(GridSortMode.SingleColumn);
        })
    .Groupable()
    .Filterable()
    .Resizable(resize => resize.Columns(true))
    .Navigatable()
    .Editable(edit =>
        {
            edit.Mode(GridEditMode.PopUp).TemplateName("UpdateUser");
        })
    .Selectable(select => select.Mode(GridSelectionMode.Multiple).Type(GridSelectionType.Cell))
    .Events(ev =>
        {
            ev.Save("refreshPage");
        })
    .DataSource(data =>
    {
        data.Ajax()
            .Model(m => m.Id(b => b.Id))
            .PageSize(10)
            .ServerOperation(true)
            .Events(ev => ev.Error("errorAlert"))
            .Create("CreateBook", "Books")
            .Read("ReadUsers", "Users")
            .Update("UpdateUser", "Users")
            .Destroy("DeleteUser", "Users");
    }))
                </text>);

              tabstrip.Add().Text("Categories")
                  .Content(@<text>

                    @*CATEGORIES*@

                    <h2>AllCategories</h2>

                    @(Html.Kendo()
                .Grid<CategoryViewModel>()
    .Name("grid-categories")
    .Columns(columns =>
    {
        columns.Bound(model => model.Name);
        columns.Bound(model => model.Catalog);
        columns.Command(command =>
            {
                command.Edit();
                command.Destroy();
            });
    })
    .ToolBar(tool =>
                {
                    tool.Create();
                })
    .Pageable(page =>
        {
            page.PreviousNext(true);
            page.Numeric(true);
        })
    .Sortable(sort =>
        {
            sort.AllowUnsort(false);
            sort.SortMode(GridSortMode.SingleColumn);
        })
    .Groupable()
    .Filterable()
    .Resizable(resize => resize.Columns(true))
    .Navigatable()
    .Editable(edit =>
        {
            edit.Mode(GridEditMode.PopUp).TemplateName("EditCategory");
        })
    .Selectable(select => select.Mode(GridSelectionMode.Multiple).Type(GridSelectionType.Cell))
    .Events(ev =>
        {
            ev.Save("refreshPage");
        })
    .DataSource(data =>
    {
        data.Ajax()
            .Model(m => m.Id(b => b.Id))
            .PageSize(10)
            .ServerOperation(true)
            .Events(ev => ev.Error("errorAlert"))
            .Create("CreateCategory", "Categories")
            .Read("ReadCategories", "Categories")
            .Update("UpdateCategory", "Categories")
            .Destroy("DeleteCategory", "Categories");
    }))
                </text>);

          })
    )
</div>


<script>

    function errorAlert() {
        console.log("An error ocurred");
    }

    function refreshPage() {
        document.location.reload();
    }

    function selectCatValue(e) {
        $('#catNameTb').val(this.dataItem(e.item.index()).Name);
        $('#catNameTb').text(this.dataItem(e.item.index()).Name);
        $('#catNameTb').html(this.dataItem(e.item.index()).Name);


    }
</script>